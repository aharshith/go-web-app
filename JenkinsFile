pipeline {
    agent any

    environment {
        SONAR_SCANNER_HOME = '/opt/sonar-scanner'
        SONAR_SCANNER_BIN = "${SONAR_SCANNER_HOME}/bin"
    }

    stages {
        stage('Checkout SCM') {
            steps {
                checkout scm
            }
        }
        
        stage('Install Dependencies') {
            steps {
                script {
                    // Install necessary tools and dependencies in the Docker container
                    sh '''
                        apt-get update && apt-get install -y curl unzip git
                    '''
                }
            }
        }

        stage('Install Sonar Scanner') {
            steps {
                script {
                    // Download and install Sonar Scanner
                    sh '''
                        curl -sSLo sonarscanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.7.0.2747-linux.zip
                        unzip -o sonarscanner.zip -d /opt
                        export PATH=$PATH:/opt/sonar-scanner-4.7.0.2747-linux/bin
                    '''
                }
            }
        }

        stage('Build Golang Application') {
            steps {
                script {
                    // Install Go dependencies and build the application
                    sh '''
                        go mod tidy
                        go build -o app -buildvcs=false
                    '''
                }
            }
        }

        stage('Static Code Analysis') {
            steps {
                withCredentials([string(credentialsId: 'sonar-auth-token', variable: 'SONAR_AUTH_TOKEN')]) {
                    script {
                        // Run Sonar Scanner for code analysis
                        sh '''
                            sonar-scanner -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=http://10.0.2.15:9000 -Dsonar.sources=. -Dsonar.language=go
                        '''
                    }
                }
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                script {
                    // Docker build and push logic goes here
                }
            }
        }

        stage('Update Deployment File') {
            steps {
                script {
                    // Update deployment file logic
                }
            }
        }
    }

    post {
        always {
            cleanWs()  // Clean workspace after pipeline completion
        }
    }
}
