pipeline {
  agent {
    docker {
      image 'docker:19.03.12-dind'  // Docker-in-Docker image with Go pre-installed
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock'  // Mount Docker socket for Docker commands
    }
  }

  environment {
    SONAR_URL = "http://10.0.2.15:9000"
    DOCKER_IMAGE = "aharshith/go-web-app:${BUILD_NUMBER}"
    REGISTRY_CREDENTIALS = credentials('docker-cred')
    GIT_REPO_NAME = "go-web-app"
    GIT_USER_NAME = "aharshith"
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Build Golang Application') {
      steps {
        script {
          // Run Go build
          sh 'go mod tidy'  // Fetch dependencies
          sh 'go build -o app -buildvcs=false'  // Build the Golang application
        }
      }
    }

    stage('Static Code Analysis') {
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          // Run SonarQube scanner for Go project
          sh """
            sonar-scanner \
              -Dsonar.login=$SONAR_AUTH_TOKEN \
              -Dsonar.host.url=${SONAR_URL} \
              -Dsonar.sources=. \
              -Dsonar.language=go
          """
        }
      }
    }

    stage('Build and Push Docker Image') {
      steps {
        script {
          // Docker build and push
          sh "docker build -t ${DOCKER_IMAGE} ."
          def dockerImage = docker.image("${DOCKER_IMAGE}")
          docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
            dockerImage.push()  // Push to Docker registry
          }
        }
      }
    }

    stage('Update Deployment File') {
      steps {
        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
          script {
            // Git commit and push deployment file
            sh '''
              git config user.email "aharshith23@gmail.com"
              git config user.name "aharshith"
              BUILD_NUMBER=${BUILD_NUMBER}
              sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" k8s/manifests/deployment.yaml
              git add k8s/manifests/deployment.yaml
              git commit -m "Update deployment image to version ${BUILD_NUMBER}"
              git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
            '''
          }
        }
      }
    }
  }

  post {
    always {
      cleanWs()  // Clean up workspace
    }
  }
}
